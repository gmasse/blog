{"pages":[{"title":"About","text":"People,Human relations,Having fun,Data privacy,and Freedom of speechare my pillars. Hi, I’m Germain, an IT leader with 16 years of experience in scalable (☁️) infrastructures. I ❤️ tech/software/hardware and I believe in the open-source model. If you have any comment or question, feel free to contact me on Twitter.","link":"/blog/about/index.html"}],"posts":[{"title":"HOW TO pre-configure your Ubuntu installation for a Raspberry Pi","text":"Whether you need to install your Raspberry Pi headless,Or whether you plan to mass-produce SD card for a big IoT project,In both case, Ubuntu offer a very standard way to pre-configure your image, based on Cloud-init. PreambleFlash your SD card with an Ubuntu image: Install Ubuntu Server on a Raspberry Pi 2, 3 or 4. You can use balenaEtcher to install the image on your media in the blink of an eye! Cloud-init configuration(Re)mount your SD card volume, then you have acces to the two files we will update: user-data and network-config. Cloud-init is a de facto standard for Cloud VM configuration. You can do pretty everything with it. System configurationuser-data file contains some examples to help you with your configuration. For more details, you can refer to the Cloud-init documentation; or you can jump directly to examples. You can find below my own configuration file, which: set a hostname set a (default) user pi with an authorized public ssh key and sudo rights 12345678910111213141516#cloud-config## Set hostnamehostname: raspberry## Configure default usersystem_info: default_user: name: pi ssh_authorized_keys: - ssh-rsa ... user@comment sudo: ALL=(ALL) NOPASSWD:ALL## Reboot to enable Wifi configuration (more details in network-config file)power_state: mode: reboot Network configurationnetwork-config relies on Netplan format (reference).The default configuration of the Ubuntu pre-installed image enables network on the ethernet port, using DHCP: 12345version: 2ethernets: eth0: dhcp4: true optional: true For example, if you want to enable both ethernet and wifi, update the file accordingly: 123456789101112131415161718192021version: 2ethernets: eth0: dhcp4: true optional: true# Wifi interface remains down during first boot. You can't rely on# sole Wifi for network during cloud-init (forget about packages# upgrade and so on...).# You might like to reboot your system at the end of cloud-init.# This can be achieved by adding those lines to your user-data file:# power_state:# mode: rebootwifis: wlan0: dhcp4: true optional: true access-points: \"ChangeWithYourSSID\": # mode defaults to \"infrastructure\" (client) password: \"ChangeWithYourPassword\"","link":"/blog/2020/01/14/HOW-TO-pre-configure-your-Ubuntu-installation-for-a-Raspberry-Pi/"},{"title":"Take control of your e-mail","text":"When it’s time to talk about regaining control of personal data, e-mail are on the top of my list. I have never trusted Google to deal with my data (my photos, my e-mail, or my documents). Even if I admit Gmail offer a very convenient service and a wonderful anti-spam (thanks to all the data shared by 1.5 billion active users and their 10 millions of spam and malicious emails received every minute). This guide will help you to recover control of your e-mail. When your business relies on digital exchanges, your e-mail provider must be very reliable. A chance that the Simple Mail Transfer Protocol is robust, allowing your precious e-mail to be retransmitted in case of outage of a gateway. In fact, a gateway could be off-line during days before the e-mail would be returned to its sender. By the time, in addition to SMTP, other protocols and standards has been added to provide a complete e-mail service: IMAP (used by your client to retrieve e-mail from the server) TLS/SSL (for security and privacy) SPF, DKIM and DMARC (to authenticate senders and fight against phishing and spam) Sieve (to define filtering rules) Hey! I don’t want to build a rocket. I just need an e-mail service that respect my privacy.Answer is simple: rely on a service provided by a recognized European entity (respecting GDPR, which is normally mandatory). In short, you can trust OVHcloud e-mail solutions. Let’s do it!For fun or if your needs are a bit specific, you can also do it yourself. In my all life, I have built 3 times a complete e-mailing system for my personal use. Obsolescence of the underlying Debian system, and therefore security, was the main driver. This last time, I defined these requirements: Operating System abstraction (ie I can easily upgrade/change the OS without risking a major impact on the e-mail application stack) Sustainable Open-Source community supporting the entire stack Hardware abstraction Docker to the rescueLooking for a stateless e-mail stack, I have rapidly identified docker-mailserver as a good candidate. Anti-spam is based on SpamAssassin (a personal choice based on my experience) and configuration is very simple (no web interface, no additional dabatase, KISS)).If docker-mailserver does not fit you, have a look at those alternatives: mailcow or Mailu. This (almost) stateless approach enables to easily upgrade or downgrade the VM (vertical scaling). RequirementsBasic configuration1 CPU2 GB RAM + Swap (or 3 GB if you don’t want to use swap)8 GB Storage for System and Container (don’t forget to add the Swap size if you need it)+ Storage for e-mail accounts ClamAV is memory consuming (more than 800MB for the virus signature database). If you don’t run ClamAV (for example if you use another ant-virus or gateway), you should be able to run with 512MB of RAM. Advanced configurationFor e-mail accounts storage, my first thought was to use Object Storage but I was not able to find any Open-Source IMAP server. Then I have decided to go with a scalalable Block Storage solution (like Ceph-based OVH Block Storage). For SMTP output, IP reputation is very important. Default VM’s IP does not seem to be a convenient choice. My preference goes to ‘Static’ IP (like an OVH Fail-Over IP). Another advantage is I could decide to replace the VM while keeping the same IP. Step by step, using OpenStack-based OVH Public CloudI assume a new Public Cloud Project has been created, and you have downloaded the OpenRC environment file.First, load the environment: source openrc.sh. 1. Instanciate a VMIf needed, push your SSH public key to OpenStack region openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey We can not purchase any IP without a running instance. So we will instanciate the VM without any OS: # Download cloudinit script that will help later to setup our VMcurl -fsSLO https://raw.githubusercontent.com/gmasse/emailgw/master/cloudinit# Instanciate the VMopenstack server create --flavor s1-4 --key-name mykey --user-data cloudinit --image \"rescue-ovh\" email The cloudinit script will update the system, install packages for docker and unbound, and configure network with local dns and the static IP. 2. Purchase a ‘Static’ IPUsing Customer Interface (you can follow the guide): And assign it to the VM named email. 3. Add Block StorageThere are two types of block storage: classic and high-speed (openstack volume type list). Performances of classic storage seems acceptable for an entry level mail gateway. Create a 10GB volume and attache the volume to the instance: # Create the volumeopenstack volume create --type classic --size 10 email_storage# Attach the volume to the VMopenstack server add volume email email_storage --device=/dev/sdb 4. Build the VMPass the Static IP as meta-data (replace 1.2.3.4 with your own IP) and build the VM: openstack server rebuild --property static_ip=1.2.3.4 --image \"Ubuntu 18.04\" email 5. Setup StorageConnect to the VM: ssh ubuntu@1.2.3.4 # LVM setupsudo pvcreate /dev/sdbsudo vgcreate vg-mail /dev/sdbsudo lvcreate -n lv-mail -l 100%FREE vg-mail# Format filesystemsudo mkfs -t ext4 -L MAIL -E nodiscard /dev/vg-mail/lv-mail# Mount itsudo mkdir -p /mnt/mailecho -e 'LABEL=MAIL\\t/mnt/mail\\text4\\tdefaults,noatime\\t0 2' | sudo tee -a /etc/fstabsudo mount /mnt/mail 6. Configure local DNS resolverMany Anti-spam blacklist systems rely on DNS, some of those blacklists rate-limit can be exceeded when using mutualized DNS resolver (your provider or global anycast like Quad9). Using your own local resolver with your Static IP would solve this issue. Configure unbound to allow local resolution and use the Static IP for external request (replace 1.2.3.4 with your own IP): /etc/unbound/unbound.conf.d/docker.conf123456server: interface: 127.0.0.1 interface: ::1 interface: 172.17.0.1 access-control: 172.16.0.0/12 allow outgoing-interface: 1.2.3.4 Configure Systemd to start Unbound after Docker service: sudo systemctl edit unbound.service: 123[Unit]After=docker.serviceWants=docker.service Reload service: sudo systemctl reload unbound. To test your local DNS resolver, you can use a DNS reflector (like DNS Paranoia) and check it answers your Static IP: $ dig +noall +answer reflect.dnsp.coreflect.dnsp.co. 0 IN A 1.2.3.4 7. Generate Let’s encrypt SSL certificateTo generate certificate, run: sudo docker run --rm -ti -v $PWD/log/:/var/log/letsencrypt/ -v $PWD/etc/:/etc/letsencrypt/ -p 80:80 certbot/certbot certonly --standalone -d mail.mydomain.com 9. Configure firewallReview the rules, then copy and apply: sudo curl -o /etc/iptables/rules.v4 https://raw.githubusercontent.com/gmasse/emailgw/master/etc/iptables/rules.v4sudo curl -o /etc/iptables/rules.v6 https://raw.githubusercontent.com/gmasse/emailgw/master/etc/iptables/rules.v6sudo ip6tables-restore --noflush &lt; /etc/iptables/rules.v6sudo iptables-restore --noflush &lt; /etc/iptables/rules.v4 Do not restart the service iptables-persistent because it will overwrite the Docker default rules and prevent from accessing the container. 10. Configure the containerDownload the configuration files: sudo mkdir /mnt/mail/docker-mailserversudo chown ubuntu:ubuntu /mnt/mail/docker-mailserverln -s /mnt/mail/docker-mailserver/ ~/docker-mailservercd ~/docker-mailserver/curl -o setup.sh https://raw.githubusercontent.com/docker-mailserver/docker-mailserver/master/setup.sh; chmod a+x ./setup.shcurl -o docker-compose.yml https://raw.githubusercontent.com/gmasse/emailgw/master/docker-mailserver/docker-compose.ymlcurl -o env-mailserver https://raw.githubusercontent.com/gmasse/emailgw/master/docker-mailserver/env-mailserver Update env-mailserver according to your setup (OVERRIDE_HOSTNAME and POSTMASTER_ADDRESS). By default, docker-mailserver uses Maildir format for mailboxes. This is a very common format where each e-mail is stored in one file. For better performances and/or to use Alternate storage, you can rely on Dovecot sdbox and mdbox (supported since the merge of my pull request). Update and save .env file: ~/docker-mailserver/.env1234HOSTNAME=mailDOMAINNAME=mydomain.comCONTAINER_NAME=mailEXTERNAL_IP=1.2.3.4 11. Run itCreate at least one e-mail account: sudo ./setup.sh email add &lt;user@domain&gt; [&lt;password&gt;]Then launch the container: sudo docker-compose up -d mail 12. To go furtherGenerate DKIM keysAutomatic update of the container To be continued…Let’s encrypt SSL auto-renewCoudinit: add storage and dns configurationTiered storage, using Dovecot Alternate storage feature: recent emails on high-speed block storage, archives on normal speedVolume (auto?) resizeIPv6E-mail configuration auto-discover","link":"/blog/2019/11/08/Take-control-of-your-e-mail/"}],"tags":[{"name":"Rapsberry Pi","slug":"Rapsberry-Pi","link":"/blog/tags/Rapsberry-Pi/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/blog/tags/Ubuntu/"},{"name":"Cloud-init","slug":"Cloud-init","link":"/blog/tags/Cloud-init/"},{"name":"Email","slug":"Email","link":"/blog/tags/Email/"},{"name":"Docker","slug":"Docker","link":"/blog/tags/Docker/"},{"name":"OpenStack","slug":"OpenStack","link":"/blog/tags/OpenStack/"},{"name":"OVHcloud","slug":"OVHcloud","link":"/blog/tags/OVHcloud/"}],"categories":[]}